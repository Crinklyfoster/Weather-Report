#BlueJ class context
comment0.target=Part1
comment0.text=\r\n\ \ Write\ a\ method\ named\ coldestHourInFile\ that\ has\ one\ parameter,\ a\ CSVParser\ named\ parser.\ This\ method\ returns\ the\ CSVRecord\ with\ the\ coldest\ temperature\ in\ the\ file\ and\ thus\ all\ the\ information\ about\ the\ coldest\ temperature,\ such\ as\ the\ hour\ of\ the\ coldest\ temperature.\ You\ should\ also\ write\ a\ void\ method\ named\ testColdestHourInFile()\ to\ test\ this\ method\ and\ print\ out\ information\ about\ that\ coldest\ temperature,\ such\ as\ the\ time\ of\ its\ occurrence..\r\n\ \r\n\ @\ Snehil\ S\ P\ \r\n\ @\ version\ 1.0\ (20\ June\ 2023)\r\n
comment1.params=parser
comment1.target=org.apache.commons.csv.CSVRecord\ coldestHourInFile(org.apache.commons.csv.CSVParser)
comment10.params=
comment10.target=void\ testaverageTemperatureInFile()
comment2.params=currentRow\ minTemp
comment2.target=org.apache.commons.csv.CSVRecord\ lowestOfTwo(org.apache.commons.csv.CSVRecord,\ org.apache.commons.csv.CSVRecord)
comment3.params=
comment3.target=void\ coldestHourInFileTester()
comment4.params=
comment4.target=java.lang.String\ fileWithColdestTemperature()
comment5.params=parser
comment5.target=org.apache.commons.csv.CSVRecord\ lowestHumidityInFile(org.apache.commons.csv.CSVParser)
comment6.params=currentRow\ minHum
comment6.target=org.apache.commons.csv.CSVRecord\ lowestOfTwoHum(org.apache.commons.csv.CSVRecord,\ org.apache.commons.csv.CSVRecord)
comment7.params=
comment7.target=void\ testLowestHumidityInFile()
comment8.params=
comment8.target=void\ lowestHumidityInManyFiles()
comment9.params=parser
comment9.target=double\ averageTemperatureInFile(org.apache.commons.csv.CSVParser)
numComments=11
